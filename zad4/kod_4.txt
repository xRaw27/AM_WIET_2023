// compress.py
import numpy as np
from scipy.sparse.linalg import svds
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap


class Node:
    def __init__(self, n, m, rank):
        self.n = n
        self.m = m
        self.rank = rank
        self.U = None
        self.Sigma = None
        self.VT = None
        self.children = []

    def print_matrix(self, pre=""):
        if self.rank is not None:
            if self.rank > 0:
                print(pre, self.n, self.m, self.rank)
            else:
                print(pre, self.n, self.m, "zeros")
        else:
            print(pre, self.n, self.m, "split,   children: ", len(self.children))
            for node in self.children:
                node.print_matrix(pre + "  ")

    def __get_matrix_to_draw(self):
        if self.rank is not None:
            if self.rank > 0:
                m = np.zeros((self.n, self.m))
                m[:, :self.rank] = 1
                m[:self.rank, :] = 1
                return m
            else:
                return np.zeros((self.n, self.m))
        else:
            return np.vstack(
                (
                    np.hstack((self.children[0].__get_matrix_to_draw(), self.children[1].__get_matrix_to_draw())),
                    np.hstack((self.children[2].__get_matrix_to_draw(), self.children[3].__get_matrix_to_draw())),
                )
            )

    def draw_matrix(self):
        fig, ax = plt.subplots(figsize=(16, 9))
        ax.matshow(self.__get_matrix_to_draw(), cmap=ListedColormap(['w', 'k']))
        plt.show()


def split_matrix(M: np.ndarray):
    n = M.shape[0] // 2
    return M[:n, :n], M[:n, n:], M[n:, :n], M[n:, n:]


def compress_matrix(M, r, epsilon):
    if not np.any(M):
        return Node(*M.shape, 0)

    if min(M.shape[0], M.shape[1]) <= r + 1:
        U, Sigma, VT = np.linalg.svd(M)
        node = Node(*M.shape, M.shape[0])
        node.U = np.array(U)
        node.Sigma = Sigma
        node.VT = np.array(VT)
        return node

    U, Sigma, VT = svds(M, k=r + 1)

    if abs(Sigma[0]) < epsilon:
        node = Node(*M.shape, r)
        node.U = U[:, 1:]
        node.Sigma = Sigma[1:]
        node.VT = VT[1:]
    else:
        M11, M12, M21, M22 = split_matrix(M)
        node = Node(*M.shape, None)
        node.children = [
            compress_matrix(M11, r, epsilon),
            compress_matrix(M12, r, epsilon),
            compress_matrix(M21, r, epsilon),
            compress_matrix(M22, r, epsilon)
        ]

    return node


def decompress(node):
    if node.rank is not None:
        if node.rank > 0:
            return node.U * node.Sigma @ node.VT
        else:
            return np.zeros((node.n, node.m))
    else:
        return np.vstack(
            (
                np.hstack((decompress(node.children[0]), decompress(node.children[1]))),
                np.hstack((decompress(node.children[2]), decompress(node.children[3]))),
            )
        )



// multiplication.py
from compress import Node, compress_matrix, decompress
import numpy as np
from scipy.sparse import random as random_sparse


def split(X: np.array):
    n = X.shape[0] // 2
    return X[:n], X[n:]


def split_horizontal(X: np.ndarray):
    n = X.shape[0] // 2
    return X[:n, :], X[n:, :]


def split_vertical(X: np.ndarray):
    n = X.shape[1] // 2
    return X[:, :n], X[:, n:]


def split_compressed(v: Node):
    n, m = v.n // 2, v.m // 2
    nodes = [Node(n, m, v.rank), Node(n, m, v.rank), Node(n, m, v.rank), Node(n, m, v.rank)]
    U1, U2 = split_horizontal(v.U)
    VT1, VT2 = split_vertical(v.VT)
    nodes[0].U = U1
    nodes[0].Sigma = v.Sigma
    nodes[0].VT = VT1
    nodes[1].U = U1
    nodes[1].Sigma = v.Sigma
    nodes[1].VT = VT2
    nodes[2].U = U2
    nodes[2].Sigma = v.Sigma
    nodes[2].VT = VT1
    nodes[3].U = U2
    nodes[3].Sigma = v.Sigma
    nodes[3].VT = VT2
    return nodes


def matrix_vector_mult(v: Node, X: np.ndarray):
    if len(v.children) == 0:
        if v.rank > 0:
            return v.U * v.Sigma @ v.VT @ X
        else:
            return np.zeros(X.shape)

    X1, X2 = split_horizontal(X)
    Y1 = matrix_vector_mult(v.children[0], X1)
    Y2 = matrix_vector_mult(v.children[1], X2)
    Y3 = matrix_vector_mult(v.children[2], X1)
    Y4 = matrix_vector_mult(v.children[3], X2)
    return np.vstack((Y1 + Y2, Y3 + Y4))


def recompress(A, B, epsilon):
    Qa, Ra = np.linalg.qr(A, mode="reduced")
    Qb, Rb = np.linalg.qr(B.T, mode="reduced")

    U, Sigma, VT = np.linalg.svd(Ra @ Rb.T)

    for r in range(0, Sigma.shape[0]):
        if Sigma[r] < epsilon:
            return Qa @ U[:, :r], Sigma[:r], (Qb @ VT.T[:, :r]).T, r

    return Qa @ U, Sigma, (Qb @ VT.T).T, Sigma.shape[0]


def addition(v: Node, w: Node, epsilon):
    U = np.hstack((v.U, w.U))
    Sigma = np.hstack((v.Sigma, w.Sigma))
    VT = np.vstack((v.VT, w.VT))
    U, Sigma, VT, r = recompress(U * Sigma, VT, epsilon=epsilon)
    node = Node(v.n, v.m, r)
    node.U = U
    node.Sigma = Sigma
    node.VT = VT
    return node


def matrix_matrix_add(v: Node, w: Node, epsilon):
    if len(v.children) == 0 and len(w.children) == 0:
        if v.rank == 0 and w.rank == 0:
            return Node(v.n, v.m, 0)
        elif v.rank == 0:
            return w
        elif w.rank == 0:
            return v
        else:
            return addition(v, w, epsilon=epsilon)
    elif len(v.children) > 0 and len(w.children) > 0:
        node = Node(v.n, v.m, None)
        node.children = [
            matrix_matrix_add(v.children[0], w.children[0], epsilon=epsilon),
            matrix_matrix_add(v.children[1], w.children[1], epsilon=epsilon),
            matrix_matrix_add(v.children[2], w.children[2], epsilon=epsilon),
            matrix_matrix_add(v.children[3], w.children[3], epsilon=epsilon)
        ]
        return node
    elif len(v.children) == 0 and len(w.children) > 0:
        if v.rank == 0:
            return w
        nodes = split_compressed(v)
        node = Node(v.n, v.m, None)
        node.children = [
            matrix_matrix_add(nodes[0], w.children[0], epsilon=epsilon),
            matrix_matrix_add(nodes[1], w.children[1], epsilon=epsilon),
            matrix_matrix_add(nodes[2], w.children[2], epsilon=epsilon),
            matrix_matrix_add(nodes[3], w.children[3], epsilon=epsilon)
        ]
        return node
    else:
        if w.rank == 0:
            return v
        nodes = split_compressed(w)
        node = Node(v.n, v.m, None)
        node.children = [
            matrix_matrix_add(v.children[0], nodes[0], epsilon=epsilon),
            matrix_matrix_add(v.children[1], nodes[1], epsilon=epsilon),
            matrix_matrix_add(v.children[2], nodes[2], epsilon=epsilon),
            matrix_matrix_add(v.children[3], nodes[3], epsilon=epsilon)
        ]
        return node


def multiply_recursive(v: Node, w: Node, epsilon):
    A = v.children
    B = w.children
    if len(A) == 0:
        A = split_compressed(v)
    if len(B) == 0:
        B = split_compressed(w)

    node = Node(v.n, v.m, None)
    node.children = [
        matrix_matrix_add(matrix_matrix_mult(A[0], B[0], epsilon), matrix_matrix_mult(A[1], B[2], epsilon), epsilon),
        matrix_matrix_add(matrix_matrix_mult(A[0], B[1], epsilon), matrix_matrix_mult(A[1], B[3], epsilon), epsilon),
        matrix_matrix_add(matrix_matrix_mult(A[2], B[0], epsilon), matrix_matrix_mult(A[3], B[2], epsilon), epsilon),
        matrix_matrix_add(matrix_matrix_mult(A[2], B[1], epsilon), matrix_matrix_mult(A[3], B[3], epsilon), epsilon)
    ]
    return node


def matrix_matrix_mult(v: Node, w: Node, epsilon):
    if len(v.children) == 0 and len(w.children) == 0:
        if v.rank == 0 or w.rank == 0:
            return Node(v.n, v.m, 0)
        else:
            node = Node(v.n, v.m, rank=v.rank)
            node.U = v.U
            node.Sigma = v.Sigma
            node.VT = (v.VT @ w.U * w.Sigma) @ w.VT
            return node
    if len(v.children) > 0 and len(w.children) > 0:
        return multiply_recursive(v, w, epsilon=epsilon)
    if len(v.children) == 0 and len(w.children) > 0:
        if v.rank == 0:
            return Node(v.n, v.m, 0)
        return multiply_recursive(v, w, epsilon=epsilon)
    if len(v.children) > 0 and len(w.children) == 0:
        if w.rank == 0:
            return Node(w.n, w.m, 0)
        return multiply_recursive(v, w, epsilon=epsilon)


def generate_matrix_compressed(n):
    M = random_sparse(n, n, density=0.01).todense()
    m = compress_matrix(M, r=2, epsilon=0.001)
    return M, m


def test_matrix_vector_mult():
    M1, m1 = generate_matrix_compressed(256)

    m1.draw_matrix()
    x = np.random.random((256, 1))
    y = matrix_vector_mult(m1, x)

    print(f"||y - M1 @ x||^2 = {np.sum(np.square(y - (M1 @ x)))}")


def test_matrix_matrix_add():
    M1, m1 = generate_matrix_compressed(256)
    M2, m2 = generate_matrix_compressed(256)
    m3 = matrix_matrix_add(m1, m2, epsilon=0.001)

    m1.draw_matrix()
    m2.draw_matrix()
    m3.draw_matrix()

    M3 = decompress(m3)
    print(f"||M3 - (M1 + M2)||^2 = {np.sum(np.square(M3 - (M1 + M2)))}")


def test_matrix_matrix_mult():
    M = random_sparse(256, 256, density=0.01).todense()
    m1 = compress_matrix(M, r=2, epsilon=0.001)
    m2 = compress_matrix(M, r=2, epsilon=0.001)
    m3 = matrix_matrix_mult(m1, m2, epsilon=0.001)

    m1.draw_matrix()
    m3.draw_matrix()

    M3 = decompress(m3)
    print(f"||M3 - (M1 @ M1)||^2 = {np.sum(np.square(M3 - (M @ M)))}")



// main.py
import numpy as np
import matplotlib.pyplot as plt
from time import perf_counter_ns
from scipy.optimize import curve_fit
from scipy.sparse import random as random_sparse
from multiplication import matrix_vector_mult, matrix_matrix_add, matrix_matrix_mult

from compress import compress_matrix


def test_matrix_vector_mult(max_k, density=0.1, r=2, epsilon=0.001):
    times = []

    for k in range(1, max_k + 1):
        print(f"### matrix_vector_mult 2^{k} x 2^{k} ###")
        n = 2 ** k
        matrix = random_sparse(n, n, density=density, random_state=0).todense()
        x = np.random.random((n, 1))
        matrix_compressed = compress_matrix(matrix, r=r, epsilon=epsilon)
        start = perf_counter_ns()
        y = matrix_vector_mult(matrix_compressed, x)
        times.append(perf_counter_ns() - start)
        print(f"Time: {times[-1]}")

    return times


def test_matrix_matrix_mult(max_k, density=0.1, r=2, epsilon=0.001):
    times = []

    for k in range(1, max_k + 1):
        print(f"### matrix_matrix_mult 2^{k} x 2^{k} ###")
        n = 2 ** k
        matrix = random_sparse(n, n, density=density, random_state=0).todense()
        matrix_compressed1 = compress_matrix(matrix, r=r, epsilon=epsilon)
        matrix_compressed2 = compress_matrix(matrix, r=r, epsilon=epsilon)
        start = perf_counter_ns()
        y = matrix_matrix_mult(matrix_compressed1, matrix_compressed2, epsilon=epsilon)
        times.append(perf_counter_ns() - start)
        print(f"Time: {times[-1]}")

    return times


def test_matrix_matrix_add(max_k, density=0.1, r=2, epsilon=0.001):
    times = []

    for k in range(1, max_k + 1):
        print(f"### matrix_matrix_add 2^{k} x 2^{k} ###")
        n = 2 ** k
        matrix1 = random_sparse(n, n, density=density, random_state=0).todense()
        matrix2 = random_sparse(n, n, density=density, random_state=0).todense()
        matrix_compressed1 = compress_matrix(matrix1, r=r, epsilon=epsilon)
        matrix_compressed2 = compress_matrix(matrix2, r=r, epsilon=epsilon)
        start = perf_counter_ns()
        y = matrix_matrix_add(matrix_compressed1, matrix_compressed2, epsilon=epsilon)
        times.append(perf_counter_ns() - start)
        print(f"Time: {times[-1]}")

    return times


def func(x, a, n):
    return a * x ** n


def plot(max_k, times, title):
    x = np.arange(1, max_k + 1)

    popt, pcov = curve_fit(func, 2 ** x, times)
    a, n = popt
    x2 = np.linspace(0, max_k)

    fig, ax = plt.subplots(figsize=(12, 7), dpi=130)
    ax.plot(x, times, "o", label=f"Czas wykonania")
    ax.plot(x2, func(2 ** x2, a, n), label=f"Dopasowana krzywa: {round(a, 3)} * N^{round(n, 3)}")
    ax.set_title(f"Macierze 2^k x 2^k, {title} - pomiar czasu i ocena złożoności przez dopasowanie krzywej do wykresu", y=1.03)
    ax.set_xlabel("k")
    ax.set_ylabel("Czas [ns]")
    ax.set_yscale('log')
    ax.set_xticks(x, x)
    ax.legend()
    plt.grid()
    plt.show()


def plot_matrix_vector_mult():
    MAX_K = 9

    times_10 = test_matrix_vector_mult(MAX_K, density=0.1)
    times_20 = test_matrix_vector_mult(MAX_K, density=0.2)
    times_30 = test_matrix_vector_mult(MAX_K, density=0.3)
    times_40 = test_matrix_vector_mult(MAX_K, density=0.4)
    times_50 = test_matrix_vector_mult(MAX_K, density=0.5)

    plot(MAX_K, times_10, "10% wartości niezerowych")
    plot(MAX_K, times_20, "20% wartości niezerowych")
    plot(MAX_K, times_30, "30% wartości niezerowych")
    plot(MAX_K, times_40, "40% wartości niezerowych")
    plot(MAX_K, times_50, "50% wartości niezerowych")


def plot_matrix_matrix_add():
    MAX_K = 8

    times_10 = test_matrix_matrix_add(MAX_K, density=0.1)
    times_20 = test_matrix_matrix_add(MAX_K, density=0.2)
    times_30 = test_matrix_matrix_add(MAX_K, density=0.3)
    times_40 = test_matrix_matrix_add(MAX_K, density=0.4)
    times_50 = test_matrix_matrix_add(MAX_K, density=0.5)

    plot(MAX_K, times_10, "10% wartości niezerowych")
    plot(MAX_K, times_20, "20% wartości niezerowych")
    plot(MAX_K, times_30, "30% wartości niezerowych")
    plot(MAX_K, times_40, "40% wartości niezerowych")
    plot(MAX_K, times_50, "50% wartości niezerowych")


def plot_matrix_matrix_mult():
    MAX_K = 7

    times_10 = test_matrix_matrix_mult(MAX_K, density=0.1)
    times_20 = test_matrix_matrix_mult(MAX_K, density=0.2)
    times_30 = test_matrix_matrix_mult(MAX_K, density=0.3)
    times_40 = test_matrix_matrix_mult(MAX_K, density=0.4)
    times_50 = test_matrix_matrix_mult(MAX_K, density=0.5)

    plot(MAX_K, times_10, "10% wartości niezerowych")
    plot(MAX_K, times_20, "20% wartości niezerowych")
    plot(MAX_K, times_30, "30% wartości niezerowych")
    plot(MAX_K, times_40, "40% wartości niezerowych")
    plot(MAX_K, times_50, "50% wartości niezerowych")


if __name__ == "__main__":
    plot_matrix_vector_mult()
    plot_matrix_matrix_add()
    plot_matrix_matrix_mult()

